using System;
using System.Collections.Generic;
using Api.CrossCuting.DependencyInjection;
using Api.CrossCuting.Mappings;
using Api.Data.Context;
using Api.Domain.Security;
using AutoMapper;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;
using Microsoft.OpenApi.Models;

namespace Api.Application
{
    // Classe respons√°vel pela configura√ß√£o inicial da aplica√ß√£o.
    public class Startup
    {
        // Construtor que recebe as configura√ß√µes da aplica√ß√£o.
        public Startup(IConfiguration configuration, IWebHostEnvironment env)
        {
            _enviroment = env;
            Configuration = configuration;
        }

        // Propriedade que armazena as configura√ß√µes da aplica√ß√£o.
        public IConfiguration Configuration { get; }

        public IWebHostEnvironment _enviroment { get; }
        
        

        // M√©todo chamado pelo runtime para adicionar servi√ßos ao cont√™iner de DI.
        public void ConfigureServices(IServiceCollection services)
        {
            
            if(_enviroment.IsEnvironment("Testing"))
            {
                Environment.SetEnvironmentVariable("DB_CONNECTION", "");
                Environment.SetEnvironmentVariable("DATABASE", "MYSQL");
                Environment.SetEnvironmentVariable("MIGRATION", "APLICAR");
                Environment.SetEnvironmentVariable("Audience", "ExemploAudience");
                Environment.SetEnvironmentVariable("Issuer", "ExemploIssue");
                Environment.SetEnvironmentVariable("Seconds", "43200");
            }
            services.AddControllers();

            // Configura as depend√™ncias dos servi√ßos.
            ConfigureService.ConfigureDependenciesService(services);

            // Configura as depend√™ncias dos reposit√≥rios.
            ConfigureRepository.ConfigureDependenciesRepository(services);

            //Cria uma nova configura√ß√£o para o AutoMapper, que √© uma biblioteca de mapeamento de objetos
            var config = new AutoMapper.MapperConfiguration(cfg =>
            {          
                      //Adiciona um perfil de mapeamento chamado DtoToModelProfile. Perfis s√£o usados no AutoMapper para agrupar configura√ß√µes de mapeamento relacionadas.
                      cfg.AddProfile(new DtoToModelProfile());
                      cfg.AddProfile(new EntityToDtoProfile());
                      cfg.AddProfile(new ModelToEntityProfile());
            });

            // Esses perfis definem regras e configura√ß√µes de mapeamento entre diferentes tipos de objetos em sua aplica√ß√£o, como DTOs (Data Transfer Objects), 
            // entidades de banco de dados e modelos de dom√≠nio. Isso facilita a convers√£o de dados entre diferentes camadas 
            // da aplica√ß√£o de forma eficiente e centralizada. Interessante, n√£o √©? üöÄ Se precisar de mais alguma coisa, s√≥ falar!

            IMapper mapper = config.CreateMapper();
            services.AddSingleton (mapper);

            // Cria uma nova inst√¢ncia de SigningConfigurations.
            var signingConfigurations = new Signingconfigurations();

            // Adiciona a inst√¢ncia de SigningConfigurations como um servi√ßo Singleton.
            // Singleton significa que uma √∫nica inst√¢ncia do servi√ßo ser√° criada e compartilhada por toda a aplica√ß√£o.
            services.AddSingleton(signingConfigurations);

            // Cria uma nova inst√¢ncia de TokenConfigurations.
            var tokenConfigurations = new TokenConfigurations();

            // Configura a inst√¢ncia de TokenConfigurations usando as op√ß√µes da se√ß√£o "TokenConfigurations" do Configuration.
            new ConfigureFromConfigurationOptions<TokenConfigurations>(
                Configuration.GetSection("TokenConfigurations")
            ).Configure(tokenConfigurations);

            //Adiciona servi√ßos de autentica√ß√£o ao cont√™iner de servi√ßos e configura as op√ß√µes de autentica√ß√£o.
            services.AddAuthentication(authOptions =>
            {
                // Define o esquema de autentica√ß√£o padr√£o para JWT Bearer.
                authOptions.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                // Define o esquema de desafio padr√£o para JWT Bearer.
                authOptions.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(bearerOptions =>
            {
                // Obt√©m os par√¢metros de valida√ß√£o do token do objeto bearerOptions.
                var paramsValidation = bearerOptions.TokenValidationParameters;
                // Define a chave de assinatura do emissor dos tokens.
                paramsValidation.IssuerSigningKey = signingConfigurations.Key;
                // Define o p√∫blico v√°lido para os tokens (quem pode us√°-los).
                paramsValidation.ValidAudience = Environment.GetEnvironmentVariable("Audience");
                // Define o emissor v√°lido dos tokens (quem pode emiti-los).
                paramsValidation.ValidIssuer = Environment.GetEnvironmentVariable("Issuer");

                // Valida a assinatura de um token recebido
                paramsValidation.ValidateIssuerSigningKey = true;
                // Verifica se um token recebido ainda √© v√°lido
                paramsValidation.ValidateLifetime = true;

                // Tempo de toler√¢ncia para a expira√ß√£o de um token (utilizado
                // caso haja problemas de sincronismo de hor√°rio entre diferentes
                // computadores envolvidos no processo de comunica√ß√£o)
                paramsValidation.ClockSkew = TimeSpan.Zero;
            });

            // Adiciona os servi√ßos de autoriza√ß√£o ao cont√™iner de servi√ßos.
            services.AddAuthorization(auth =>
            {
                // Adiciona uma pol√≠tica de autoriza√ß√£o chamada "Bearer".
                auth.AddPolicy("Bearer", new AuthorizationPolicyBuilder()
                    // Adiciona esquemas de autentica√ß√£o JWT Bearer √† pol√≠tica.
                    .AddAuthenticationSchemes(JwtBearerDefaults.AuthenticationScheme)
                    // Requer que o usu√°rio esteja autenticado para acessar recursos protegidos pela pol√≠tica.
                    .RequireAuthenticatedUser()
                    // Constr√≥i a pol√≠tica de autoriza√ß√£o.
                    .Build());
            });


            // Adiciona a inst√¢ncia de TokenConfigurations como um servi√ßo Singleton.
            services.AddSingleton(tokenConfigurations);
            //Instancia Unica

            // Adiciona servi√ßos de controle (API Controllers).
            services.AddControllers();

            // Adiciona e configura o Swagger para gerar a documenta√ß√£o da API.
            services.AddSwaggerGen(c =>
            {
                // Define um documento Swagger com as informa√ß√µes fornecidas.
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Version = "v1", // Vers√£o da documenta√ß√£o da API.
                    Title = "Curso de API com AspNetCore 3.1 - Na pr√°tica", // T√≠tulo da documenta√ß√£o.
                    Description = "Arquitetura DDD", // Descri√ß√£o da documenta√ß√£o.
                    TermsOfService = new Uri("http://www.Gymble.com.br"), // URL dos termos de servi√ßo.

                    // Informa√ß√µes de contato.
                    Contact = new OpenApiContact
                    {
                        Name = "Gabriel Silva", // Nome do contato.
                        Email = "Gymble@gmail.com", // Email do contato.
                        Url = new Uri("http://www.Gymble.com.br"), // URL do contato.
                    },

                    // Informa√ß√µes de licen√ßa.
                    License = new OpenApiLicense
                    {
                        Name = "Termo de licen√ßa de Uso", // Nome da licen√ßa.
                        Url = new Uri("http://www.Gymble.com.br") // URL da licen√ßa.
                    }
                });

                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                    {
                        Description = "Entre com o Token JWT",
                        Name = "Authorization",
                        In = ParameterLocation.Header,
                        Type = SecuritySchemeType.ApiKey
                    }
                );

                c.AddSecurityRequirement(new OpenApiSecurityRequirement
                    {
                        {
                            new OpenApiSecurityScheme
                            {
                                Reference = new OpenApiReference
                                {
                                    Id = "Bearer",
                                    Type = ReferenceType.SecurityScheme
                                }
                            },new List<string>()
                        }
                    }    
                );
            });
        }

        // M√©todo chamado pelo runtime para configurar o pipeline de requisi√ß√µes HTTP.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            // Configura√ß√µes espec√≠ficas para o ambiente de desenvolvimento.
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                // Configura√ß√µes para ambientes de produ√ß√£o.
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
            }

            // Redireciona requisi√ß√µes HTTP para HTTPS.
            app.UseHttpsRedirection();

            // Habilita a configura√ß√£o de arquivos est√°ticos (CSS, JavaScript, etc).
            app.UseStaticFiles();

            // Ativa o middleware do Swagger para gerar a documenta√ß√£o da API.
            app.UseSwagger();

            // Configura a interface do Swagger UI.
            app.UseSwaggerUI(c =>
            {
                // Define o endpoint do Swagger JSON e um t√≠tulo para a documenta√ß√£o.
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Curso de API com AspNetCore 3.1");
                // Define o prefixo de rota da interface do Swagger UI. Quando vazio, a interface ser√° exibida na raiz do aplicativo.
                c.RoutePrefix = string.Empty;
            });

            // Configura o roteamento da aplica√ß√£o.
            app.UseRouting();

            // Adiciona suporte √† autoriza√ß√£o.
            app.UseAuthorization();

            // Configura os endpoints de controle.
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

            if(Environment.GetEnvironmentVariable("MIGRATION").ToLower() == "APLICAR".ToLower())
            {
                using (var service = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope())
                        {
                            using (var context = service.ServiceProvider.GetService<MyContext>())
                            {
                                context.Database.Migrate();
                            }  
                        }
            }


        }
    }
}
